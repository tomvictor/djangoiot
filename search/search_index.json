{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Iotcore - Python MQTT Broker and IoT Features for Django and FastAPI","text":"<p>The project aims to give full support for mqtt broker and related apis. The internals of the mqtt server is  written in Rust using popular Tokio framework. Motive of the project is to avoid the GIL limitation of python and bring all the  fun features offered by rust.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Full-fledged configurable Tokio based MQTT broker</li> <li>No python GIL limitation</li> <li>All Standard MQTT broker features</li> <li>Zero extra setup required to run mqtt broker in you Django and Fastapi project</li> <li>MQTT client, with callback support for async or non-blocking applications</li> <li>and more</li> </ul>"},{"location":"#planned-features","title":"Planned Features","text":"<ul> <li>Device support</li> <li>Sensor support</li> <li>Sensor data storage</li> <li>Django based admin pages</li> <li>Django rest framework based APIs for managing devices and sensors</li> <li>SSL certificates and policy management</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install iotcore\n</code></pre> <p>Create a new file called mqtt.toml in your root project directory and copy pase the sample mqtt.toml from https://tomvictor.github.io/iotcore/config/</p>"},{"location":"#fastapi-setup","title":"FastAPI setup","text":"<p>Broker only</p> <pre><code>from fastapi import FastAPI\nfrom iotcore.fastapi import iotcore_broker\n\napp = FastAPI(lifespan=iotcore_broker)\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n</code></pre> <p>Broker plus Mqtt client</p> <pre><code>from fastapi import FastAPI\nfrom contextlib import asynccontextmanager\nfrom iotcore import IotCore\n\niot = IotCore()\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    iot.background_loop_forever()\n    yield\n\n\napp = FastAPI(lifespan=lifespan)\n\n\n@iot.accept(topic=\"temperature\")\ndef temperature_data(request):\n    print(f\"Temperature data : {request}\")\n\n\ndef mqtt_callback(data):\n    print(f\"iot &gt;: {data}\")\n\n\n@app.get(\"/sub\")\ndef sub():\n    iot.subscribe(\"iot\", mqtt_callback)\n    return {\"response\": \"subscribed\"}\n\n\n@app.get(\"/pub\")\ndef pub():\n    iot.publish(\"temperature\", \"{'temp': 18}\")\n    return {\"response\": \"published\"}\n\n\n@app.get(\"/\")\ndef home():\n    return {\"Hello\": \"World\"}\n</code></pre>"},{"location":"#django-setup","title":"Django Setup","text":"<pre><code>from django.http import JsonResponse\nfrom iotcore import IotCore\n\niot = IotCore()\niot.background_loop_forever()\n\n\ndef mqtt_callback(data):\n    print(f\"Django &gt;: {data}\")\n\n\ndef subscribe(request):\n    iot.subscribe(\"iot\", mqtt_callback)\n    return JsonResponse({\"response\": \"subscribed\"})\n\n\ndef publish(request):\n    iot.publish(\"iot\", \"demo\")\n    return JsonResponse({\"response\": \"published\"})\n</code></pre> <p>Now Connect to mqtt broker on localhost MQTT Port : 1883</p>"},{"location":"#run-example-project","title":"Run Example project","text":"<p>Django</p> <pre><code>pip install iotcore\npip install django\n\npython examples/django/manage.py runserver\n</code></pre> <p>FastAPI</p> <pre><code>pip install iotcore\npip install fastapi\npip install uvicorn\n\nuvicorn examples.fastapi.main:app\n</code></pre> <p>Open you mqtt client and use below details to connect to the broker: Host: 127.0.0.1 or  localhost Port: 1883</p>"},{"location":"#contribute","title":"Contribute","text":"<ul> <li>Issue Tracker: github.com/tomvictor/iotcore/issues</li> <li>Source Code: github.com/tomvictor/iotcore</li> </ul>"},{"location":"#support","title":"Support","text":"<p>Star the project on GitHub :)</p>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the MIT license.</p>"},{"location":"config/","title":"MQTT Broker config","text":"<p>Create a new file called mqtt.toml on the project root and paste the config below.</p> <pre><code>id = 0\n\n# A commitlog read will pull full segment. Make sure that a segment isn't\n# too big as async tcp writes readiness of one connection might affect tail\n# latencies of other connection. Not a problem with preempting runtimes\n[router]\nid = 0\nmax_connections = 10010\nmax_outgoing_packet_count = 200\nmax_segment_size = 104857600\nmax_segment_count = 10\n# shared_subscriptions_strategy = \"random\" # \"sticky\" | \"roundrobin\" ( default ) | \"random\"\n# Any filters that match to configured filter will have custom segment size.\n# [router.custom_segment.'/office/+/devices/status']\n# max_segment_size = 102400\n# max_segment_count = 2\n# [router.custom_segment.'/home/+/devices/status']\n# max_segment_size = 51200\n# max_segment_count = 2\n\n# [bridge]\n# name = \"bridge-1\"\n# addr = \"localhost:1883\"\n# qos = 0\n# sub_path = \"#\"\n# reconnection_delay = 5\n# ping_delay = 5\n# timeout_delay = 5\n#     [bridge.connections]\n#     connection_timeout_ms = 60000\n#     max_payload_size = 20480\n#     max_inflight_count = 500\n#     dynamic_filters = true\n#     [bridge.transport.tls]\n#     ca = \"ca.cert.pem\"\n#     client_auth = { certs = \"test-1.cert.pem\", key = \"test-1.key.pem\" }\n\n# Configuration of server and connections that it accepts\n[v4.1]\nname = \"v4-1\"\nlisten = \"0.0.0.0:1883\"\nnext_connection_delay_ms = 1\n[v4.1.connections]\nconnection_timeout_ms = 60000\nmax_payload_size = 20480\nmax_inflight_count = 100\ndynamic_filters = true\n#   auth = { user1 = \"p@ssw0rd\", user2 = \"password\" }\n#      [v4.1.connections.auth]\n#      user1 = \"p@ssw0rd\"\n#      user2 = \"password\"\n\n# [v4.2]\n# name = \"v4-2\"\n# listen = \"0.0.0.0:8883\"\n# next_connection_delay_ms = 10\n#     # tls config for rustls\n#     [v4.2.tls]\n#     capath = \"/etc/tls/ca.cert.pem\"\n#     certpath = \"/etc/tls/server.cert.pem\"\n#     keypath = \"/etc/tls/server.key.pem\"\n#     # settings for all the connections on this server\n#     [v4.2.connections]\n#     connection_timeout_ms = 60000\n#     throttle_delay_ms = 0\n#     max_payload_size = 20480\n#     max_inflight_count = 100\n#     max_inflight_size = 1024\n\n[v5.1]\nname = \"v5-1\"\nlisten = \"0.0.0.0:1884\"\nnext_connection_delay_ms = 1\n[v5.1.connections]\nconnection_timeout_ms = 60000\nmax_payload_size = 20480\nmax_inflight_count = 100\n\n[prometheus]\nlisten = \"127.0.0.1:9042\"\ninterval = 1\n\n[ws.1]\nname = \"ws-1\"\nlisten = \"0.0.0.0:8083\"\nnext_connection_delay_ms = 1\n[ws.1.connections]\nconnection_timeout_ms = 60000\nmax_client_id_len = 256\nthrottle_delay_ms = 0\nmax_payload_size = 20480\nmax_inflight_count = 500\nmax_inflight_size = 1024\n\n# [ws.2]\n# name = \"ws-2\"\n# listen = \"0.0.0.0:8081\"\n# next_connection_delay_ms = 1\n#     [ws.2.tls]\n#     capath = \"/etc/tls/ca.cert.pem\"\n#     certpath = \"/etc/tls/server.cert.pem\"\n#     keypath = \"/etc/tls/server.key.pem\"\n#     [ws.2.connections]\n#     connection_timeout_ms = 60000\n#     max_client_id_len = 256\n#     throttle_delay_ms = 0\n#     max_payload_size = 20480\n#     max_inflight_count = 500\n#     max_inflight_size = 1024\n\n[console]\nlisten = \"0.0.0.0:3030\"\n\n# [metrics]\n#     [metrics.alerts]\n#     push_interval = 1\n#     [metrics.meters]\n#     push_interval = 1\n</code></pre>"}]}